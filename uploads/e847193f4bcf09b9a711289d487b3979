import React, { useState, useEffect } from "react";
import { useNavigate } from 'react-router-dom';
import Drafts from './DraftSection';
import { ChevronLeft, ChevronRight, Pencil } from "lucide-react";
import Navbar from "../Navbar";
import "./Inbox.css";
import SearchBar from "../Search-bar/SearchBar";
import axios from 'axios';


// const MailCompose = ({ onSend, onDiscard }) => {
//   const [from, setFrom] = useState(''); // Sender's email
//   const [to, setTo] = useState('');
//   const [subject, setSubject] = useState('');
//   const [body, setBody] = useState('');

//   const handleSend = () => {
//     onSend({ from, to, subject, body });
//   };

//   const handleDiscard = () => {
//     onDiscard();
//   };

//   return (
//     <div className="mail-compose">
//       <div className="header">
//         <h3>New Mail</h3>
//       </div>
//       <div className="form-group">
//         <input
//           type="email"
//           placeholder="From"
//           value={from}
//           onChange={(e) => setFrom(e.target.value)}
//         />
//       </div>
//       <div className="form-group">
//         <input
//           type="email"
//           placeholder="To"
//           value={to}
//           onChange={(e) => setTo(e.target.value)}
//         />
//       </div>
//       <div className="form-group">
//         <input
//           type="text"
//           placeholder="Subject"
//           value={subject}
//           onChange={(e) => setSubject(e.target.value)}
//         />
//       </div>
//       <div className="form-group">
//         <textarea
//           placeholder="Compose email"
//           value={body}
//           onChange={(e) => setBody(e.target.value)}
//         ></textarea>
//       </div>
//       <div className="actions">
//         <button onClick={handleSend}>Send</button>
//         <button onClick={handleDiscard}>Discard</button>
//       </div>
//     </div>
//   );
// };

const Inbox = () => {
  const [emails, setEmails] = useState([]); // Inbox emails
  const [isComposeOpen, setIsComposeOpen] = useState(false);
  const [sentEmails, setSentEmails] = useState([]); // Sent emails
  const [drafts, setDrafts] = useState([]); // Draft emails
  const [activeTab, setActiveTab] = useState('inbox'); // Track active tab
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  console.log(emails);

  // // Fetch emails for the Sent section
  // const fetchSentEmails = async () => {
  //   try {
  //     const response = await axios.get('http://localhost:5000/sent-emails');
  //     setEmails(response.data);
  //   } catch (error) {
  //     console.error('Error fetching sent emails:', error);
  //   }
  // };

// Fetch emails based on activeTab
  useEffect(() => {
    const fetchEmails = async () => {
      setLoading(true);
      setError(null);

      let url = '';
      if (activeTab === 'inbox') {
        url = 'http://localhost:5000/fetch-inbox-emails';
      } else if (activeTab === 'sent') {
        url = 'http://localhost:5000/fetch-sent-emails';
      } else if (activeTab === 'drafts') {
        url = 'http://localhost:5000/fetch-drafts';
      }

      try {
        const res = await fetch(url);
        const data = await res.json();

        if (!res.ok) {
          throw new Error(data.message || 'Failed to fetch data');
        }

        if (activeTab === 'inbox') {
          setEmails(data.emails || []);
        } else if (activeTab === 'sent') {
          setSentEmails(data.emails || []);
        } else if (activeTab === 'drafts') {
          setDrafts(data || []);
        }
      } catch (err) {
        console.error(`Error fetching ${activeTab} emails:, err`);
        setError(`Failed to fetch ${activeTab} emails`);
      } finally {
        setLoading(false);
      }
    };

    fetchEmails();
  }, [activeTab]);

  // Handle folder tab click
  const handleTabClick = (tab) => {
    setActiveTab(tab);
    setError(null); // Clear errors when switching tabs
  };

  // Navigate to compose email page
  // const handleComposeClick = () => {
  //   navigate('/send-email');
  // };

  // Handle sending an email
  // const handleSend = async (email) => {
  //   try {
  //     const response = await axios.post('http://localhost:5000/send-email', {
  //       sender: 'your-email@gmail.com', // Replace with the sender's email
  //       receiver: email.to,
  //       subject: email.subject,
  //       body: email.body,
  //     });
  //     console.log('Email sent:', response.data);
  //     setIsComposeOpen(false); // Close the compose window after sending
  //     fetchSentEmails(); // Refresh the Sent emails list
  //   } catch (error) {
  //     console.error('Error sending email:', error);
  //     if (error.response) {
  //       console.error('Backend response:', error.response.data); // Log backend response
  //     }
  //   }
  // };

  // const handleDiscard = () => {
  //   console.log('Email discarded');
  //   setIsComposeOpen(false); // Close the compose window
  // };

  const handleDeleteEmail = async (id) => {
    try {
      const response = await axios.delete(`http://localhost:5000/api/emails/${id}`);
      console.log('Email deleted:', response.data);
      // Remove the deleted email from the state
      setEmails((prevEmails) => prevEmails.filter((email) => email._id !== id));
    } catch (error) {
      console.error('Error deleting email:', error);
    }
  };

  // const toggleCompose = () => {
  //   setIsComposeOpen(!isComposeOpen); // Toggle the compose window
  // };

  // Fetch emails based on the active tab
  useEffect(() => {
    const fetchEmails = async () => {
      try {
        // Convert activeTab to lowercase to match backend status
        const status = activeTab.toLowerCase();
        const response = await axios.get(`http://localhost:5000/api/emails/${status}`);
        setEmails(response.data);
      } catch (error) {
        console.error('Error fetching emails:', error);
      }
    };

    fetchEmails();
  }, [activeTab]);

  // Navigate to compose email page
  const handleComposeClick = () => {
    navigate('/send-email');
  };


  return (
    <div className="main-cont">
      <Navbar />
      <div className="meetings-container" style={{ width: "80%" }}>
        {/* Header */}
        <SearchBar />
        <div className="meetings-header">
          <div className="tabs">
            <button onClick={() => handleTabClick('inbox')}>Inbox</button>
            <button onClick={() => handleTabClick('sent')}>Sent</button>
            <button onClick={() => handleTabClick('drafts')}>Drafts</button>
          </div>

          <button className="compose-button" onClick={handleComposeClick}>
            <Pencil className="icon" />
            Compose +
          </button>
        </div>

        {/* Date Navigation */}
        <div className="date-nav">
          <div className="date-nav-content">
            <h2 className="date-title">E-MAILS</h2>
            <div className="date-controls">
              <button className="nav-button">
                <ChevronLeft className="icon" />
              </button>
              <span className="current-date">26 Aug 2024</span>
              <button className="nav-button">
                <ChevronRight className="icon" />
              </button>
            </div>
          </div>
        </div>
        {/* Meetings List */}
        <div className="meetings-list">
          <div className="meetings-header-row">
            <div>Sender</div>
            <div>Subject</div>
            <div>Time</div>
          </div>

          {/* {isComposeOpen && (
            <MailCompose onSend={handleSend} onDiscard={handleDiscard} />
          )} */}

          <main className="email-main">
            <h1>
              {activeTab === 'inbox'
                ? 'Inbox'
                : activeTab === 'sent'
                  ? 'Sent Emails'
                  : 'Draft Emails'}
            </h1>

            {loading ? (
              <p>Loading...</p>
            ) : error ? (
              <p style={{ color: 'red' }}>{error}</p>
            ) : activeTab === 'inbox' ? (
              // <InboxSection emails={emails} />
              <div>
                {emails.length > 0 ? (
                  emails.map((email) => (
                    <div key={email._id} className="meeting-row">
                      <div className="meeting-name">
                        {/* <input
                          type="checkbox"
                          id={`email-${email._id}`}
                          className="meeting-checkbox"
                        /> */}
                        <label htmlFor={`email-${email._id}`} className="meeting-label">
                          {email.from}
                        </label>
                      </div>
                      <div className="meeting-description">{email.subject}</div>
                      <div className="meeting-time">
                      <span>{new Date(email.date).toLocaleString()}</span>
                      </div>
                      <button
                        className="delete-btn"
                        onClick={() => handleDeleteEmail(email._id)}
                      >
                        üóëÔ∏è Delete
                      </button>
                    </div>
                  ))
                ) : (
                  <p>No emails to show</p>
                )}
              </div>
            ) : activeTab === 'sent' ? (
              // <SentSection emails={sentEmails} />

              <div>
                {emails.length > 0 ? (
                  emails.map((email) => (
                    <div key={email._id} className="meeting-row">
                      <div className="meeting-name">
                        {/* <input
                          type="checkbox"
                          id={`email-${email._id}`}
                          className="meeting-checkbox"
                        /> */}
                        <label htmlFor={`email-${email._id}`} className="meeting-label">
                          {email.to}
                        </label>
                      </div>
                      <div className="meeting-description">{email.subject}</div>
                      <div className="meeting-time">
                      <span>{new Date(email.date).toLocaleString()}</span>
                      </div>
                      <button
                        className="delete-btn"
                        onClick={() => handleDeleteEmail(email._id)}
                      >
                        üóëÔ∏è Delete
                      </button>
                    </div>
                  ))
                ) : (
                  <p>No emails to show</p>
                )}
              </div>

            ) : (
              <Drafts drafts={drafts} />
            )}
          </main>
        </div>
      </div>
    </div>
  );
}

export default Inbox;